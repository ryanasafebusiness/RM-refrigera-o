// This file is automatically generated. Do not edit it directly.
import { createClient, SupabaseClient } from '@supabase/supabase-js';
import type { Database } from './types';
import { logSupabaseConfig, isSupabaseConfigured } from './config';

const SUPABASE_URL = import.meta.env.VITE_SUPABASE_URL;
const SUPABASE_PUBLISHABLE_KEY = import.meta.env.VITE_SUPABASE_PUBLISHABLE_KEY;

// Singleton pattern to prevent multiple instances
let supabaseInstance: SupabaseClient<Database> | null = null;

// Log configuration status in development
if (import.meta.env.DEV) {
  logSupabaseConfig();
  
  if (!isSupabaseConfigured()) {
    console.warn('⚠️ Supabase não está configurado corretamente. Verifique as variáveis de ambiente.');
  }
}

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = supabaseInstance || createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, {
  auth: {
    storage: localStorage,
    persistSession: true,
    autoRefreshToken: true,
    detectSessionInUrl: true,
  },
  global: {
    headers: {
      'X-Client-Info': 'evolink-field-report',
    },
  },
  db: {
    schema: 'public',
  },
  realtime: {
    params: {
      eventsPerSecond: 10
    }
  }
});

// Store the instance to prevent multiple instances
if (!supabaseInstance) {
  supabaseInstance = supabase;
}

// Error handling wrapper
export const handleSupabaseError = (error: any, context: string) => {
  if (!error) return;
  
  console.error(`[${context}] Erro do Supabase:`, error);
  
  // Tratar erros específicos
  if (error.message?.includes('JWT')) {
    console.error('Erro de autenticação: Token inválido ou expirado');
  }
  
  if (error.message?.includes('network')) {
    console.error('Erro de rede: Verifique sua conexão');
  }
  
  if (error.code === 'PGRST301' || error.message?.includes('RLS')) {
    console.error('Erro de permissão: Política RLS bloqueou a operação');
  }
  
  return error;
};